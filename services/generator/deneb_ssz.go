// Code generated by fastssz. DO NOT EDIT.
// Hash: 7a7384ee30c748c14667bd42ebc6f53c1efe0d7f4e960ea8bd90ac6fc175e7a5
// Version: 0.1.3
package generator

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the stubbedDenebBeaconState object
func (s *stubbedDenebBeaconState) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the stubbedDenebBeaconState object to a target array
func (s *stubbedDenebBeaconState) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(748)

	// Field (0) 'GenesisTime'
	dst = ssz.MarshalUint64(dst, s.GenesisTime)

	// Field (1) 'GenesisValidatorsRoot'
	dst = append(dst, s.GenesisValidatorsRoot[:]...)

	// Field (2) 'Slot'
	dst = ssz.MarshalUint64(dst, s.Slot)

	// Field (3) 'ForkStub'
	dst = append(dst, s.ForkStub[:]...)

	// Field (4) 'LatestBlockHeaderStub'
	dst = append(dst, s.LatestBlockHeaderStub[:]...)

	// Field (5) 'BlockRootsStub'
	dst = append(dst, s.BlockRootsStub[:]...)

	// Field (6) 'StateRootsStub'
	dst = append(dst, s.StateRootsStub[:]...)

	// Field (7) 'HistoricalRootsStub'
	dst = append(dst, s.HistoricalRootsStub[:]...)

	// Field (8) 'ETH1DataStub'
	dst = append(dst, s.ETH1DataStub[:]...)

	// Field (9) 'ETH1DataVotesStub'
	dst = append(dst, s.ETH1DataVotesStub[:]...)

	// Field (10) 'ETH1DepositIndex'
	dst = ssz.MarshalUint64(dst, s.ETH1DepositIndex)

	// Offset (11) 'Validators'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Validators) * 121

	// Field (12) 'BalancesStub'
	dst = append(dst, s.BalancesStub[:]...)

	// Field (13) 'RANDOMixesStub'
	dst = append(dst, s.RANDOMixesStub[:]...)

	// Field (14) 'SlashingsStub'
	dst = append(dst, s.SlashingsStub[:]...)

	// Field (15) 'PreviousEpochParticipationStub'
	dst = append(dst, s.PreviousEpochParticipationStub[:]...)

	// Field (16) 'CurrentEpochParticipationStub'
	dst = append(dst, s.CurrentEpochParticipationStub[:]...)

	// Field (17) 'JustificationBitsStub'
	dst = append(dst, s.JustificationBitsStub[:]...)

	// Field (18) 'PreviousJustifiedCheckpointStub'
	dst = append(dst, s.PreviousJustifiedCheckpointStub[:]...)

	// Field (19) 'CurrentJustifiedCheckpointStub'
	dst = append(dst, s.CurrentJustifiedCheckpointStub[:]...)

	// Field (20) 'FinalizedCheckpointStub'
	dst = append(dst, s.FinalizedCheckpointStub[:]...)

	// Field (21) 'InactivityScoresStub'
	dst = append(dst, s.InactivityScoresStub[:]...)

	// Field (22) 'CurrentSyncCommitteeStub'
	dst = append(dst, s.CurrentSyncCommitteeStub[:]...)

	// Field (23) 'NextSyncCommitteeStub'
	dst = append(dst, s.NextSyncCommitteeStub[:]...)

	// Field (24) 'LatestExecutionPayloadHeaderStub'
	dst = append(dst, s.LatestExecutionPayloadHeaderStub[:]...)

	// Field (25) 'NextWithdrawalIndex'
	dst = ssz.MarshalUint64(dst, s.NextWithdrawalIndex)

	// Field (26) 'NextWithdrawalValidatorIndex'
	dst = ssz.MarshalUint64(dst, s.NextWithdrawalValidatorIndex)

	// Field (27) 'HistoricalSummariesStub'
	dst = append(dst, s.HistoricalSummariesStub[:]...)

	// Field (11) 'Validators'
	if size := len(s.Validators); size > 1099511627776 {
		err = ssz.ErrListTooBigFn("stubbedDenebBeaconState.Validators", size, 1099511627776)
		return
	}
	for ii := 0; ii < len(s.Validators); ii++ {
		if dst, err = s.Validators[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the stubbedDenebBeaconState object
func (s *stubbedDenebBeaconState) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 748 {
		return ssz.ErrSize
	}

	tail := buf
	var o11 uint64

	// Field (0) 'GenesisTime'
	s.GenesisTime = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'GenesisValidatorsRoot'
	copy(s.GenesisValidatorsRoot[:], buf[8:40])

	// Field (2) 'Slot'
	s.Slot = ssz.UnmarshallUint64(buf[40:48])

	// Field (3) 'ForkStub'
	copy(s.ForkStub[:], buf[48:80])

	// Field (4) 'LatestBlockHeaderStub'
	copy(s.LatestBlockHeaderStub[:], buf[80:112])

	// Field (5) 'BlockRootsStub'
	copy(s.BlockRootsStub[:], buf[112:144])

	// Field (6) 'StateRootsStub'
	copy(s.StateRootsStub[:], buf[144:176])

	// Field (7) 'HistoricalRootsStub'
	copy(s.HistoricalRootsStub[:], buf[176:208])

	// Field (8) 'ETH1DataStub'
	copy(s.ETH1DataStub[:], buf[208:240])

	// Field (9) 'ETH1DataVotesStub'
	copy(s.ETH1DataVotesStub[:], buf[240:272])

	// Field (10) 'ETH1DepositIndex'
	s.ETH1DepositIndex = ssz.UnmarshallUint64(buf[272:280])

	// Offset (11) 'Validators'
	if o11 = ssz.ReadOffset(buf[280:284]); o11 > size {
		return ssz.ErrOffset
	}

	if o11 < 748 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (12) 'BalancesStub'
	copy(s.BalancesStub[:], buf[284:316])

	// Field (13) 'RANDOMixesStub'
	copy(s.RANDOMixesStub[:], buf[316:348])

	// Field (14) 'SlashingsStub'
	copy(s.SlashingsStub[:], buf[348:380])

	// Field (15) 'PreviousEpochParticipationStub'
	copy(s.PreviousEpochParticipationStub[:], buf[380:412])

	// Field (16) 'CurrentEpochParticipationStub'
	copy(s.CurrentEpochParticipationStub[:], buf[412:444])

	// Field (17) 'JustificationBitsStub'
	copy(s.JustificationBitsStub[:], buf[444:476])

	// Field (18) 'PreviousJustifiedCheckpointStub'
	copy(s.PreviousJustifiedCheckpointStub[:], buf[476:508])

	// Field (19) 'CurrentJustifiedCheckpointStub'
	copy(s.CurrentJustifiedCheckpointStub[:], buf[508:540])

	// Field (20) 'FinalizedCheckpointStub'
	copy(s.FinalizedCheckpointStub[:], buf[540:572])

	// Field (21) 'InactivityScoresStub'
	copy(s.InactivityScoresStub[:], buf[572:604])

	// Field (22) 'CurrentSyncCommitteeStub'
	copy(s.CurrentSyncCommitteeStub[:], buf[604:636])

	// Field (23) 'NextSyncCommitteeStub'
	copy(s.NextSyncCommitteeStub[:], buf[636:668])

	// Field (24) 'LatestExecutionPayloadHeaderStub'
	copy(s.LatestExecutionPayloadHeaderStub[:], buf[668:700])

	// Field (25) 'NextWithdrawalIndex'
	s.NextWithdrawalIndex = ssz.UnmarshallUint64(buf[700:708])

	// Field (26) 'NextWithdrawalValidatorIndex'
	s.NextWithdrawalValidatorIndex = ssz.UnmarshallUint64(buf[708:716])

	// Field (27) 'HistoricalSummariesStub'
	copy(s.HistoricalSummariesStub[:], buf[716:748])

	// Field (11) 'Validators'
	{
		buf = tail[o11:]
		num, err := ssz.DivideInt2(len(buf), 121, 1099511627776)
		if err != nil {
			return err
		}
		s.Validators = make([]*phase0.Validator, num)
		for ii := 0; ii < num; ii++ {
			if s.Validators[ii] == nil {
				s.Validators[ii] = new(phase0.Validator)
			}
			if err = s.Validators[ii].UnmarshalSSZ(buf[ii*121 : (ii+1)*121]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the stubbedDenebBeaconState object
func (s *stubbedDenebBeaconState) SizeSSZ() (size int) {
	size = 748

	// Field (11) 'Validators'
	size += len(s.Validators) * 121

	return
}

// HashTreeRoot ssz hashes the stubbedDenebBeaconState object
func (s *stubbedDenebBeaconState) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the stubbedDenebBeaconState object with a hasher
func (s *stubbedDenebBeaconState) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'GenesisTime'
	hh.PutUint64(s.GenesisTime)

	// Field (1) 'GenesisValidatorsRoot'
	hh.PutBytes(s.GenesisValidatorsRoot[:])

	// Field (2) 'Slot'
	hh.PutUint64(s.Slot)

	// Field (3) 'ForkStub'
	hh.PutBytes(s.ForkStub[:])

	// Field (4) 'LatestBlockHeaderStub'
	hh.PutBytes(s.LatestBlockHeaderStub[:])

	// Field (5) 'BlockRootsStub'
	hh.PutBytes(s.BlockRootsStub[:])

	// Field (6) 'StateRootsStub'
	hh.PutBytes(s.StateRootsStub[:])

	// Field (7) 'HistoricalRootsStub'
	hh.PutBytes(s.HistoricalRootsStub[:])

	// Field (8) 'ETH1DataStub'
	hh.PutBytes(s.ETH1DataStub[:])

	// Field (9) 'ETH1DataVotesStub'
	hh.PutBytes(s.ETH1DataVotesStub[:])

	// Field (10) 'ETH1DepositIndex'
	hh.PutUint64(s.ETH1DepositIndex)

	// Field (11) 'Validators'
	{
		subIndx := hh.Index()
		num := uint64(len(s.Validators))
		if num > 1099511627776 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.Validators {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1099511627776)
	}

	// Field (12) 'BalancesStub'
	hh.PutBytes(s.BalancesStub[:])

	// Field (13) 'RANDOMixesStub'
	hh.PutBytes(s.RANDOMixesStub[:])

	// Field (14) 'SlashingsStub'
	hh.PutBytes(s.SlashingsStub[:])

	// Field (15) 'PreviousEpochParticipationStub'
	hh.PutBytes(s.PreviousEpochParticipationStub[:])

	// Field (16) 'CurrentEpochParticipationStub'
	hh.PutBytes(s.CurrentEpochParticipationStub[:])

	// Field (17) 'JustificationBitsStub'
	hh.PutBytes(s.JustificationBitsStub[:])

	// Field (18) 'PreviousJustifiedCheckpointStub'
	hh.PutBytes(s.PreviousJustifiedCheckpointStub[:])

	// Field (19) 'CurrentJustifiedCheckpointStub'
	hh.PutBytes(s.CurrentJustifiedCheckpointStub[:])

	// Field (20) 'FinalizedCheckpointStub'
	hh.PutBytes(s.FinalizedCheckpointStub[:])

	// Field (21) 'InactivityScoresStub'
	hh.PutBytes(s.InactivityScoresStub[:])

	// Field (22) 'CurrentSyncCommitteeStub'
	hh.PutBytes(s.CurrentSyncCommitteeStub[:])

	// Field (23) 'NextSyncCommitteeStub'
	hh.PutBytes(s.NextSyncCommitteeStub[:])

	// Field (24) 'LatestExecutionPayloadHeaderStub'
	hh.PutBytes(s.LatestExecutionPayloadHeaderStub[:])

	// Field (25) 'NextWithdrawalIndex'
	hh.PutUint64(s.NextWithdrawalIndex)

	// Field (26) 'NextWithdrawalValidatorIndex'
	hh.PutUint64(s.NextWithdrawalValidatorIndex)

	// Field (27) 'HistoricalSummariesStub'
	hh.PutBytes(s.HistoricalSummariesStub[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the stubbedDenebBeaconState object
func (s *stubbedDenebBeaconState) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
